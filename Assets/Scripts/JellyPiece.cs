using UnityEngine;
using System.Collections.Generic;
using DG.Tweening;

/// <summary>
/// Struct ƒë·ªÉ JellyPiece b√°o c√°o k·∫øt qu·∫£ cho BoardManager
/// </summary>
public struct PieceUpdateResult
{
    public bool wasModified;
    public bool wasDestroyed;
}

public class JellyPiece : MonoBehaviour
{
    #region Configuration
    [Header("Visuals")]
    [SerializeField] private GameObject jellyCellPrefab;
    [SerializeField] private Transform visualsParent;

    [Header("üé® Visual Designer")]
    [Tooltip("Top-Left cell (0,1)")]
    public JellyColor topLeft = JellyColor.None;
    [Tooltip("Top-Right cell (1,1)")]
    public JellyColor topRight = JellyColor.None;
    [Tooltip("Bottom-Left cell (0,0)")]
    public JellyColor bottomLeft = JellyColor.None;
    [Tooltip("Bottom-Right cell (1,0)")]
    public JellyColor bottomRight = JellyColor.None;
    #endregion

    #region Constants
    private const float CELL_SCALE_1X = 0.5f; 
    private const float CELL_SCALE_2X = 1.0f;
    private const float CELL_POS_HALF = 0.25f;
    private const float CELL_POS_ZERO = 0.0f;
    #endregion

    #region State
    private JellyColor[,] colorGrid = new JellyColor[2, 2];
    private List<GameObject> activeVisuals = new List<GameObject>();
    [HideInInspector] 
    public Vector2Int baseBoardPosition; 
    private const int LAYER_JELLY = 6; 
    #endregion

    //-------------------------------------------------
    #region Initialization
    //-------------------------------------------------
    
    void Awake()
    {
        gameObject.layer = LAYER_JELLY;
        InitializeFromInspector();
    }
    
    public void InitializeFromInspector()
    {
        colorGrid = new JellyColor[2, 2];
        colorGrid[0, 0] = bottomLeft;
        colorGrid[1, 0] = bottomRight;
        colorGrid[0, 1] = topLeft;
        colorGrid[1, 1] = topRight;
        UpdateVisuals(false);
    }

    public void Initialize(JellyColor[,] newGrid)
    {
        colorGrid = newGrid;
        bottomLeft = colorGrid[0, 0];
        bottomRight = colorGrid[1, 0];
        topLeft = colorGrid[0, 1];
        topRight = colorGrid[1, 1];
        UpdateVisuals(false); 
    }
    #endregion

    //-------------------------------------------------
    #region Public API (2-Phase Logic)
    //-------------------------------------------------

    public JellyColor GetColorAt(int localX, int localY)
    {
        if (localX < 0 || localX > 1 || localY < 0 || localY > 1)
        {
            return JellyColor.None;
        }
        return colorGrid[localX, localY];
    }

    /// <summary>
    /// GIAI ƒêO·∫†N 1: T√≠nh To√°n (Phase X√≥a / Logic Scale)
    /// 
    /// ‚≠ê THAY ƒê·ªîI CH√çNH:
    /// - X√ìA: To√†n b·ªô enum ShapeCase (8 cases ph·ª©c t·∫°p)
    /// - X√ìA: H√†m AnalyzeCurrentShape() (ph√¢n t√≠ch h√¨nh d·∫°ng tr∆∞·ªõc khi x√≥a)
    /// - TH√äM: Logic ƒë∆°n gi·∫£n theo S·ªê √î C√íN L·∫†I (4 cases)
    /// </summary>
    public PieceUpdateResult ApplyLogicUpdate(List<Vector2Int> localCoordsToClear)
    {
        if (localCoordsToClear == null || localCoordsToClear.Count == 0)
        {
            return new PieceUpdateResult { wasModified = false, wasDestroyed = false };
        }

        // 1. X√≥a c√°c √¥ b·ªã match
        foreach (var coord in localCoordsToClear)
        {
            if (colorGrid[coord.x, coord.y] != JellyColor.None)
            {
                colorGrid[coord.x, coord.y] = JellyColor.None;
            }
        }

        // 2. ƒê·∫øm s·ªë √¥ c√≤n l·∫°i (kh√¥ng ph·∫£i None)
        List<Vector2Int> remainingCells = new List<Vector2Int>();
        for (int x = 0; x < 2; x++)
        {
            for (int y = 0; y < 2; y++)
            {
                if (colorGrid[x, y] != JellyColor.None)
                {
                    remainingCells.Add(new Vector2Int(x, y));
                }
            }
        }

        int remainingCount = remainingCells.Count;

        // 3. √Åp d·ª•ng logic scale theo 4 TH
        switch (remainingCount)
        {
            case 0: // TH4: T·∫•t c·∫£ b·ªã h·ªßy ‚Üí Ph√° v·ª° piece
                return new PieceUpdateResult { wasModified = true, wasDestroyed = true };

            case 1: // TH3: 3 √¥ b·ªã h·ªßy, 1 √¥ c√≤n l·∫°i ‚Üí Scale th√†nh 4 √¥
                HandleCase_OneRemaining(remainingCells[0]);
                break;

            case 2: // TH2: 2 √¥ b·ªã h·ªßy, 2 √¥ c√≤n l·∫°i
                HandleCase_TwoRemaining(remainingCells);
                break;

            case 3: // TH1: 1 √¥ b·ªã h·ªßy, 3 √¥ c√≤n l·∫°i
                HandleCase_ThreeRemaining(remainingCells);
                break;
        }

        return new PieceUpdateResult { wasModified = true, wasDestroyed = false };
    }
    
    /// <summary>
    /// GIAI ƒêO·∫†N 2: Th·ª±c Thi (Phase Scale)
    /// Ch·∫°y animation scale
    /// </summary>
    public void PlayVisualUpdate()
    {
        UpdateVisuals(true);
    }

    /// <summary>
    /// GIAI ƒêO·∫†N 2: Th·ª±c Thi (Phase H·ªßy)
    /// Ch·∫°y animation h·ªßy piece
    /// </summary>
    public void PlayDestroySequence()
    {
        SetAllCells(JellyColor.None);
        UpdateVisuals(true);
        Destroy(gameObject, 0.5f);
    }
    #endregion

    //-------------------------------------------------
    #region Scale Logic (4 Tr∆∞·ªùng H·ª£p)
    //-------------------------------------------------

    /// <summary>
    /// TH1: 3 √¥ c√≤n l·∫°i ‚Üí ∆Øu ti√™n scale ngang, V√Ä s·ª≠a l·ªói 3A-1B L-shape
    /// </summary>
/// <summary>
    /// TH1: 3 √¥ c√≤n l·∫°i ‚Üí T√¨m √¥ 1x1 (isolate) v√† scale n√≥ v√†o √¥ tr·ªëng.
    /// (S·ª≠a l·ªói scale nh·∫ßm m√†u c·ªßa kh·ªëi 1x2/2x1)
    /// </summary>
    private void HandleCase_ThreeRemaining(List<Vector2Int> remaining)
    {
        // 1. T√¨m √¥ b·ªã h·ªßy (√¥ tr·ªëng)
        Vector2Int cleared = FindClearedCell(remaining);
        
        // 2. T√¨m "√¥ 1x1 c√≤n l·∫°i" (isolate cell)
        // √î isolate l√† √¥ kh√¥ng li·ªÅn k·ªÅ V√Ä c√πng m√†u
        // v·ªõi b·∫•t k·ª≥ √¥ n√†o kh√°c trong 3 √¥ c√≤n l·∫°i.
        
        Vector2Int isolateCell = Vector2Int.zero;

        // L·∫•y 3 √¥ c√≤n l·∫°i
        Vector2Int c1 = remaining[0];
        Vector2Int c2 = remaining[1];
        Vector2Int c3 = remaining[2];

        // D√πng GetLinkedCells ƒë·ªÉ t√¨m nh√≥m li√™n k·∫øt
        // GetLinkedCells s·∫Ω tr·∫£ v·ªÅ t·∫•t c·∫£ c√°c √¥ c√πng m√†u v√† li·ªÅn k·ªÅ
        List<Vector2Int> group1 = GetLinkedCells(c1.x, c1.y);
        
        // L·ªçc l·∫°i danh s√°ch group1 ƒë·ªÉ ch·ªâ ch·ª©a c√°c √¥ trong 'remaining'
        group1.RemoveAll(cell => !remaining.Contains(cell));

        // 3. Ph√¢n t√≠ch nh√≥m
        if (group1.Count == 1)
        {
            // c1 ch√≠nh l√† √¥ 1x1 isolate
            isolateCell = c1;
        }
        else if (group1.Count == 2)
        {
            // c1 l√† m·ªôt ph·∫ßn c·ªßa kh·ªëi 2-cell.
            // √î isolate l√† √¥ kh√¥ng n·∫±m trong nh√≥m n√†y.
            isolateCell = remaining.Find(c => !group1.Contains(c));
        }
        else // group1.Count == 3
        {
            // C·∫£ 3 √¥ ƒë·ªÅu li√™n k·∫øt (L-shape c√πng m√†u).
            // Kh√¥ng c√≥ √¥ isolate. Ch·ªçn c1 l√†m "isolate" c≈©ng kh√¥ng sao,
            // v√¨ logic scale ngang/d·ªçc c·ªßa b·∫°n tr∆∞·ªõc ƒë√≥ c≈©ng h·ª£p l√Ω.
            // Nh∆∞ng ƒë·ªÉ nh·∫•t qu√°n, ch√∫ng ta s·∫Ω scale c1.
            isolateCell = c1; 
        }

        // 4. L·∫•y m√†u c·ªßa √¥ isolate
        JellyColor isolateColor = colorGrid[isolateCell.x, isolateCell.y];

        // 5. √Åp d·ª•ng logic:
        // "M√†u c·ªßa √¥ 1x1 c√≤n l·∫°i scale v√†o ch·ªó tr·ªëng"
        
        // T√¥ m√†u √¥ tr·ªëng
        colorGrid[cleared.x, cleared.y] = isolateColor;
        
        // T√¥ m√†u (kh·∫≥ng ƒë·ªãnh l·∫°i m√†u) c·ªßa √¥ isolate
        // ƒë·ªÉ ƒë·∫£m b·∫£o ch√∫ng t·∫°o th√†nh m·ªôt kh·ªëi 2-cell m·ªõi.
        colorGrid[isolateCell.x, isolateCell.y] = isolateColor;
    }
    

    /// <summary>
    /// TH2: 2 √¥ c√≤n l·∫°i ‚Üí Scale th√†nh kh·ªëi 2 √¥ (∆∞u ti√™n ngang) ho·∫∑c 4 √¥
    /// </summary>
    private void HandleCase_TwoRemaining(List<Vector2Int> remaining)
    {
        Vector2Int cell1 = remaining[0];
        Vector2Int cell2 = remaining[1];
        
        JellyColor color1 = colorGrid[cell1.x, cell1.y];
        JellyColor color2 = colorGrid[cell2.x, cell2.y];
        
        bool isAdjacent = IsAdjacent(cell1, cell2);
        
        if (isAdjacent)
        {
            // --- TR∆Ø·ªúNG H·ª¢P A: 2 √î LI·ªÄN K·ªÄ ---
            
            if(color1 == color2)
            {
                // 1. C√πng m√†u: "c√≤n l·∫°i kh·ªëi 2 √¥ th√¨ scale th√†nh kh·ªëi 4 √¥"
                SetAllCells(color1);
            }
            else
            {
                // 2. Kh√°c m√†u: "c√≤n l·∫°i 2 kh·ªëi 1 √¥ th√¨ scale th√†nh kh·ªëi 2 √¥"
                // Ch√∫ng ta s·∫Ω scale c·∫£ 2 √¥ ra ƒë·ªÉ l·∫•p ƒë·∫ßy
                
                if (cell1.x == cell2.x) // Ch√∫ng ƒëang ·ªü C√ôNG C·ªòT (d·ªçc)
                {
                    // Scale ch√∫ng theo chi·ªÅu ngang
                    colorGrid[1 - cell1.x, cell1.y] = color1; // Scale √¥ 1
                    colorGrid[1 - cell2.x, cell2.y] = color2; // Scale √¥ 2
                }
                else // Ch√∫ng ƒëang ·ªü C√ôNG H√ÄNG (ngang)
                {
                    // Scale ch√∫ng theo chi·ªÅu d·ªçc
                    colorGrid[cell1.x, 1 - cell1.y] = color1; // Scale √¥ 1
                    colorGrid[cell2.x, 1 - cell2.y] = color2; // Scale √¥ 2
                }
            }
        }
        else
        {
            // --- TR∆Ø·ªúNG H·ª¢P B: 2 √î CH√âO ---
            // "∆∞u ti√™n scale chi·ªÅu ngang"
            
            // Scale √¥ 1 theo chi·ªÅu ngang
            colorGrid[1 - cell1.x, cell1.y] = color1; 
            
            // Scale √¥ 2 theo chi·ªÅu ngang
            colorGrid[1 - cell2.x, cell2.y] = color2;
        }
    }

    /// <summary>
    /// TH3: 1 √¥ c√≤n l·∫°i ‚Üí Scale th√†nh kh·ªëi 4 √¥
    /// </summary>
    private void HandleCase_OneRemaining(Vector2Int remaining)
    {
        JellyColor newColor = colorGrid[remaining.x, remaining.y];
        SetAllCells(newColor);
    }

    #endregion

    //-------------------------------------------------
    #region Helper Functions
    //-------------------------------------------------

    /// <summary>
    /// T√¨m √¥ b·ªã h·ªßy (√¥ kh√¥ng c√≥ trong danh s√°ch remaining)
    /// </summary>
    private Vector2Int FindClearedCell(List<Vector2Int> remaining)
    {
        for (int x = 0; x < 2; x++)
        {
            for (int y = 0; y < 2; y++)
            {
                Vector2Int cell = new Vector2Int(x, y);
                if (!remaining.Contains(cell))
                {
                    return cell;
                }
            }
        }
        return Vector2Int.zero; // Fallback
    }

    /// <summary>
    /// Ki·ªÉm tra 2 √¥ c√≥ li·ªÅn k·ªÅ kh√¥ng (ngang ho·∫∑c d·ªçc)
    /// </summary>
    private bool IsAdjacent(Vector2Int a, Vector2Int b)
    {
        int dx = Mathf.Abs(a.x - b.x);
        int dy = Mathf.Abs(a.y - b.y);
        
        // Li·ªÅn k·ªÅ ngang ho·∫∑c d·ªçc (kh√¥ng ch√©o)
        return (dx == 1 && dy == 0) || (dx == 0 && dy == 1);
    }

    private void SetAllCells(JellyColor color)
    {
        colorGrid[0, 0] = color;
        colorGrid[1, 0] = color;
        colorGrid[0, 1] = color;
        colorGrid[1, 1] = color;
    }

    // --- TH√äM H√ÄM N√ÄY V√ÄO JELLYPIECE.CS ---

    /// <summary>
    /// (H√ÄM HELPER M·ªöI) T√¨m t·∫•t c·∫£ c√°c √¥ con li·ªÅn k·ªÅ c√πng m√†u
    /// (S·ª≠ d·ª•ng BFS - Thu·∫≠t to√°n loang)
    /// </summary>
    public List<Vector2Int> GetLinkedCells(int startX, int startY)
    {
        List<Vector2Int> linkedCells = new List<Vector2Int>();
        Queue<Vector2Int> queue = new Queue<Vector2Int>();
        bool[,] visited = new bool[2, 2];

        JellyColor targetColor = GetColorAt(startX, startY);
        if (targetColor == JellyColor.None)
        {
            linkedCells.Add(new Vector2Int(startX, startY));
            return linkedCells; // Ch·ªâ tr·∫£ v·ªÅ ch√≠nh √¥ ƒë√≥ n·∫øu n√≥ l√† None
        }

        queue.Enqueue(new Vector2Int(startX, startY));
        visited[startX, startY] = true;

        Vector2Int[] neighbors = { 
            new Vector2Int(0, 1), new Vector2Int(0, -1), 
            new Vector2Int(1, 0), new Vector2Int(-1, 0) 
        };

        while (queue.Count > 0)
        {
            Vector2Int pos = queue.Dequeue();
            linkedCells.Add(pos);

            foreach (var neighborOffset in neighbors)
            {
                Vector2Int nPos = pos + neighborOffset;

                // Ki·ªÉm tra 4 h∆∞·ªõng
                if (nPos.x >= 0 && nPos.x < 2 && nPos.y >= 0 && nPos.y < 2 &&
                    !visited[nPos.x, nPos.y] && 
                    colorGrid[nPos.x, nPos.y] == targetColor)
                {
                    visited[nPos.x, nPos.y] = true;
                    queue.Enqueue(nPos);
                }
            }
        }
        
        return linkedCells;
    }

    #endregion

    //-------------------------------------------------
    #region Visuals (Gi·ªØ Nguy√™n)
    //-------------------------------------------------

    private void UpdateVisuals(bool animate = false)
    {
        foreach (GameObject visual in activeVisuals)
        {
            if (Application.isPlaying) Destroy(visual);
            else DestroyImmediate(visual);
        }
        activeVisuals.Clear();
        
        if (jellyCellPrefab == null || visualsParent == null) return;

        bool[,] processed = new bool[2, 2];

        for (int y = 0; y < 2; y++)
        {
            for (int x = 0; x < 2; x++)
            {
                if (processed[x, y]) continue;
                JellyColor color = colorGrid[x, y];
                
                // Ki·ªÉm tra 2x2
                bool canMerge_2x2 = (color != JellyColor.None) && (x == 0 && y == 0) && (colorGrid[1, 0] == color) && !processed[1, 0] && (colorGrid[0, 1] == color) && !processed[0, 1] && (colorGrid[1, 1] == color) && !processed[1, 1];
                if (canMerge_2x2)
                {
                    SpawnVisual(color, new Vector3(CELL_POS_ZERO, CELL_POS_ZERO, 0), new Vector3(CELL_SCALE_2X, CELL_SCALE_2X, CELL_SCALE_1X), animate);
                    processed[0, 0] = true; processed[1, 0] = true; processed[0, 1] = true; processed[1, 1] = true;
                }
                // Ki·ªÉm tra 2x1 Ngang
                else if ((color != JellyColor.None) && x == 0 && (colorGrid[1, y] == color) && !processed[1, y]) 
                {
                    SpawnVisual(color, new Vector3(CELL_POS_ZERO, (y == 0) ? -CELL_POS_HALF : CELL_POS_HALF, 0), new Vector3(CELL_SCALE_2X, CELL_SCALE_1X, CELL_SCALE_1X), animate);
                    processed[0, y] = true; processed[1, y] = true;
                }
                // Ki·ªÉm tra 1x2 D·ªçc
                else if ((color != JellyColor.None) && y == 0 && (colorGrid[x, 1] == color) && !processed[x, 1]) 
                {
                    SpawnVisual(color, new Vector3((x == 0) ? -CELL_POS_HALF : CELL_POS_HALF, CELL_POS_ZERO, 0), new Vector3(CELL_SCALE_1X, CELL_SCALE_2X, CELL_SCALE_1X), animate);
                    processed[x, 0] = true; processed[x, 1] = true;
                }
                // C√≤n l·∫°i l√† 1x1
                else 
                {
                    SpawnVisual(color, new Vector3((x == 0) ? -CELL_POS_HALF : CELL_POS_HALF, (y == 0) ? -CELL_POS_HALF : CELL_POS_HALF, 0), new Vector3(CELL_SCALE_1X, CELL_SCALE_1X, CELL_SCALE_1X), animate);
                    processed[x, y] = true;
                }
            }
        }
    }

    private void SpawnVisual(JellyColor color, Vector3 localPos, Vector3 localScale, bool animate = false)
    {
        GameObject newCell = Instantiate(jellyCellPrefab, visualsParent);
        newCell.transform.localPosition = localPos;
        
        Renderer cellRenderer = newCell.GetComponentInChildren<Renderer>();
        if (cellRenderer != null)
        {
            cellRenderer.material.color = GetColorValue(color);
        }
        
        if (animate && Application.isPlaying)
        {
            if (color == JellyColor.None)
            {
                newCell.transform.localScale = localScale;
                newCell.transform.DOScale(Vector3.zero, 0.3f)
                    .SetEase(Ease.InBack)
                    .OnComplete(() => { if (newCell != null) Destroy(newCell); }); 
            }
            else
            {
                newCell.transform.localScale = localScale * 0.3f;
                newCell.transform.DOScale(localScale, 1f)
                    .SetEase(Ease.OutBack);
                activeVisuals.Add(newCell);
            }
        }
        else
        {
            newCell.transform.localScale = localScale;
            if (color != JellyColor.None)
            {
                activeVisuals.Add(newCell);
            }
            else
            {
                newCell.SetActive(false);
            }
        }
    }

    public static Color GetColorValue(JellyColor jellyColor)
    {
        switch (jellyColor)
        {
            case JellyColor.Red: return new Color(1f, 0.2f, 0.2f);
            case JellyColor.Blue: return new Color(0.2f, 0.5f, 1f);
            case JellyColor.Green: return new Color(0.2f, 1f, 0.2f);
            case JellyColor.Yellow: return new Color(1f, 0.9f, 0.2f);
            case JellyColor.Purple: return new Color(0.8f, 0.2f, 1f);
            case JellyColor.Pink: return new Color(1f, 0.4f, 0.8f);
            case JellyColor.Cyan: return new Color(0.2f, 1f, 1f);
            case JellyColor.Orange: return new Color(1f, 0.6f, 0.2f);
            default: return Color.white;
        }
    }
    #endregion
}

public enum JellyColor
{
    None,
    Red,
    Blue,
    Green,
    Yellow,
    Purple,
    Pink,
    Cyan,
    Orange
}